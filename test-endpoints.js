// Add these endpoints to your server.js or routes file

const ExaDiscoveryService = require('./services/exaDiscovery');
const emailService = require('./services/emailService');

/**
 * Test Endpoint 1: Create Temporary Topic Area
 */
app.post('/api/test/create-temp-topic', async (req, res) => {
  try {
    const { name, keywords } = req.body;

    // Create temporary topic area
    const topicArea = await models.TopicArea.create({
      name: `[TEST] ${name}`,
      description: `Temporary test topic created at ${new Date().toISOString()}`,
      keywords: typeof keywords === 'string' ? keywords.split(',').map(k => k.trim()) : keywords,
      isActive: true,
      isTest: true  // Flag for cleanup
    });

    res.json({
      success: true,
      topicAreaId: topicArea.id,
      message: 'Temporary topic created'
    });

  } catch (error) {
    logger.error('Error creating temp topic:', error);
    res.status(500).json({ error: error.message });
  }
});

/**
 * Test Endpoint 2: Generate Email Content
 */
app.post('/api/test/generate-email', async (req, res) => {
  try {
    const { topicAreaId, topicName, sources, recipientEmail } = req.body;

    if (!sources || sources.length === 0) {
      return res.json({
        success: true,
        subject: `Test Alert: ${topicName}`,
        html: generateNoResultsEmail(topicName)
      });
    }

    // Generate email using the same template as production
    const subject = `Your ${topicName} Intelligence Brief - Test`;
    const html = await generateIntelligenceEmail(topicName, sources, recipientEmail);

    res.json({
      success: true,
      subject,
      html
    });

  } catch (error) {
    logger.error('Error generating email:', error);
    res.status(500).json({ error: error.message });
  }
});

/**
 * Test Endpoint 3: Send Test Email
 */
app.post('/api/test/send-test-email', async (req, res) => {
  try {
    const { to, subject, html } = req.body;

    // Send email using configured email service
    const result = await emailService.sendEmail({
      to,
      subject: `[TEST] ${subject}`,
      html: `
        <div style="padding: 20px; background: #fef3c7; border: 2px solid #f59e0b; border-radius: 8px; margin-bottom: 20px;">
          <strong style="color: #92400e;">⚠️ This is a Test Email</strong>
          <p style="margin: 5px 0 0 0; color: #92400e; font-size: 14px;">
            This email was generated by the admin test feature. Production emails will not have this banner.
          </p>
        </div>
        ${html}
      `
    });

    res.json({
      success: true,
      messageId: result.messageId,
      message: 'Test email sent successfully'
    });

  } catch (error) {
    logger.error('Error sending test email:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * Test Endpoint 4: Cleanup Temporary Topic
 */
app.delete('/api/test/cleanup-temp-topic/:topicAreaId', async (req, res) => {
  try {
    const { topicAreaId } = req.params;

    // Delete associated sources
    await models.Source.destroy({
      where: { topicAreaId }
    });

    // Delete topic area
    await models.TopicArea.destroy({
      where: { id: topicAreaId }
    });

    res.json({
      success: true,
      message: 'Temporary topic cleaned up'
    });

  } catch (error) {
    logger.error('Error cleaning up temp topic:', error);
    res.status(500).json({ error: error.message });
  }
});

/**
 * Helper: Generate Intelligence Email HTML
 */
async function generateIntelligenceEmail(topicName, sources, recipientEmail) {
  // Process sources to get summaries (in production, these would be from database)
  const processedSources = await Promise.all(
    sources.slice(0, 5).map(async (source, index) => {
      // Get or generate summary
      const summary = source.settings?.description ||
                     `Analysis of ${source.name || source.title}`;

      const relevanceScore = source.settings?.relevanceScore || 0.75;
      const impactScore = Math.round(relevanceScore * 10);

      return {
        index: index + 1,
        title: source.name || source.title,
        url: source.url,
        summary,
        impactScore,
        impactCircles: '●'.repeat(impactScore) + '○'.repeat(10 - impactScore),
        organization: source.settings?.organization || 'Unknown',
        publishedAt: source.settings?.publishedAt || new Date()
      };
    })
  );

  // Generate HTML email
  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Your ${topicName} Intelligence Brief</title>
</head>
<body style="margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; background-color: #f3f4f6;">

  <table role="presentation" style="width: 100%; border-collapse: collapse;">
    <tr>
      <td style="padding: 40px 20px;">

        <!-- Container -->
        <table role="presentation" style="max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; overflow: hidden; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">

          <!-- Header -->
          <tr>
            <td style="background: linear-gradient(135deg, #1f2937 0%, #111827 100%); padding: 30px; text-align: center;">
              <h1 style="margin: 0; color: #ffffff; font-size: 24px; font-weight: 600;">
                Franciscomoney Intel
              </h1>
              <p style="margin: 10px 0 0 0; color: #9ca3af; font-size: 14px;">
                AI-Powered Intelligence Briefing
              </p>
            </td>
          </tr>

          <!-- Intro -->
          <tr>
            <td style="padding: 30px 30px 20px 30px;">
              <h2 style="margin: 0 0 10px 0; color: #111827; font-size: 20px; font-weight: 600;">
                Your ${topicName} Brief
              </h2>
              <p style="margin: 0; color: #6b7280; font-size: 14px; line-height: 1.6;">
                We've analyzed the latest research and found ${processedSources.length} key ${processedSources.length === 1 ? 'report' : 'reports'} relevant to your interests:
              </p>
            </td>
          </tr>

          <!-- Reports -->
          ${processedSources.map(source => `
          <tr>
            <td style="padding: 0 30px 25px 30px;">
              <div style="background-color: #f9fafb; border-left: 4px solid #3b82f6; padding: 20px; border-radius: 4px;">

                <!-- Report Number & Title -->
                <div style="margin-bottom: 12px;">
                  <span style="display: inline-block; background-color: #3b82f6; color: #ffffff; font-size: 12px; font-weight: 600; padding: 4px 8px; border-radius: 4px; margin-right: 8px;">
                    ${source.index}
                  </span>
                  <strong style="color: #111827; font-size: 16px;">
                    ${source.title}
                  </strong>
                </div>

                <!-- Organization & Date -->
                <div style="margin-bottom: 12px; font-size: 13px; color: #6b7280;">
                  <strong>${source.organization}</strong>
                  ${source.publishedAt ? ` • ${new Date(source.publishedAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}` : ''}
                </div>

                <!-- Summary -->
                <p style="margin: 0 0 12px 0; color: #374151; font-size: 14px; line-height: 1.6;">
                  ${source.summary}
                </p>

                <!-- Impact Score -->
                <div style="margin-bottom: 12px;">
                  <span style="font-size: 12px; color: #6b7280; font-weight: 600; margin-right: 8px;">
                    IMPACT:
                  </span>
                  <span style="color: #3b82f6; font-size: 14px; letter-spacing: 2px;">
                    ${source.impactCircles}
                  </span>
                  <span style="font-size: 12px; color: #6b7280; margin-left: 4px;">
                    ${source.impactScore}/10
                  </span>
                </div>

                <!-- Read Analysis Button -->
                <a href="${source.url}" style="display: inline-block; background-color: #3b82f6; color: #ffffff; text-decoration: none; padding: 10px 20px; border-radius: 4px; font-size: 14px; font-weight: 500;">
                  Read Full Analysis →
                </a>

              </div>
            </td>
          </tr>
          `).join('')}

          <!-- Footer -->
          <tr>
            <td style="background-color: #f9fafb; padding: 30px; text-align: center; border-top: 1px solid #e5e7eb;">
              <p style="margin: 0 0 10px 0; color: #6b7280; font-size: 13px;">
                You're receiving this because you created an alert for "${topicName}"
              </p>
              <p style="margin: 0; font-size: 12px;">
                <a href="#" style="color: #3b82f6; text-decoration: none; margin: 0 10px;">Manage Alerts</a>
                <span style="color: #d1d5db;">•</span>
                <a href="#" style="color: #3b82f6; text-decoration: none; margin: 0 10px;">Unsubscribe</a>
              </p>
              <p style="margin: 15px 0 0 0; color: #9ca3af; font-size: 11px;">
                © ${new Date().getFullYear()} Franciscomoney Intel. All rights reserved.
              </p>
            </td>
          </tr>

        </table>
      </td>
    </tr>
  </table>

</body>
</html>
  `;
}

/**
 * Helper: Generate No Results Email
 */
function generateNoResultsEmail(topicName) {
  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>
<body style="margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background-color: #f3f4f6;">
  <table role="presentation" style="width: 100%; border-collapse: collapse;">
    <tr>
      <td style="padding: 40px 20px;">
        <table role="presentation" style="max-width: 600px; margin: 0 auto; background-color: #ffffff; border-radius: 8px; padding: 40px; text-align: center;">
          <tr>
            <td>
              <h1 style="color: #111827; font-size: 24px; margin-bottom: 20px;">No New Reports Found</h1>
              <p style="color: #6b7280; font-size: 16px; line-height: 1.6; margin-bottom: 20px;">
                We searched for new research on "${topicName}" but didn't find any publications in the specified time period.
              </p>
              <p style="color: #9ca3af; font-size: 14px;">
                We'll keep monitoring and notify you when new content is available.
              </p>
            </td>
          </tr>
        </table>
      </td>
    </tr>
  </table>
</body>
</html>
  `;
}

module.exports = {
  generateIntelligenceEmail,
  generateNoResultsEmail
};
